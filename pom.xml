<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>
  <groupId>fi.metatavu.metamind</groupId>
  <artifactId>metamind</artifactId>
  <version>2.0.1-SNAPSHOT</version>
  <packaging>war</packaging>
  <name>Metamind API</name>
  <description>insert description here.</description>
  <url>https://github.com/Metatavu/metamind-api</url>

  <licenses>
    <license>
      <name>GNU Affero General Public License v3</name>
      <url>http://www.gnu.org/licenses/agpl-3.0.html</url>
      <distribution>repo</distribution>
    </license>
  </licenses>
  
  <developers>
    <developer>
      <name>Metatavu Oy</name>
      <organization>Metatavu Oy</organization>
      <organizationUrl>http://www.metatavu.fi</organizationUrl>
    </developer>
  </developers>
  
  <issueManagement>
    <system>GitHub</system>
    <url>https://github.com/Metatavu/metamind-api/issues</url>
  </issueManagement>

  <scm>
    <developerConnection>scm:git:git@github.com:Metatavu/metamind-api.git</developerConnection>
    <url>git@github.com:Metatavu/metamind-api.git</url>
    <connection>scm:git:git@github.com:Metatavu/metamind-api.git</connection>
    <tag>HEAD</tag>
  </scm>

  <organization>
    <name>Metatavu Oy</name>
    <url>http://www.metatavu.fi</url>
  </organization>

  <properties>
  
    <!-- Project -->

    <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
    
    <!-- Spec -->
    
    <metamind-spec.version>2.0.12</metamind-spec.version>
       
    <!-- Maven -->

    <java.version>1.8</java.version>
	<maven.compiler.source>${java.version}</maven.compiler.source>
	<maven.compiler.target>${java.version}</maven.compiler.target>
    
    <!-- Wildfly -->
    
    <wildfly.version>16.0.0.Final</wildfly.version>
    
    <!-- Keycloak -->
    
    <keycloak.version>5.0.0</keycloak.version>
    
    <!--  Logging -->
    
    <commons-logging.version>1.2</commons-logging.version>
    <log4j.version>2.11.1</log4j.version>
	<slf4j-api.version>1.7.22</slf4j-api.version>
    
    <!-- Liquibase -->
    
    <liquibase.version>3.8.2</liquibase.version>
    
    <!-- Sargue mailgun -->
    
    <sargue-mailgun.version>1.5.0</sargue-mailgun.version>
    
    <!-- Freemarker -->
    
    <freemarker.version>2.3.23</freemarker.version>

    <!-- Beer API -->    
    
    <beer-api-client.version>0.0.11</beer-api-client.version>

    <!-- Optimaize language detector -->

    <optimaize-languagedetector.version>0.6</optimaize-languagedetector.version>

    <!-- Graal -->

    <graalvm.version>1.0.0-rc9</graalvm.version>
    
    <!-- StreamEx -->
    
    <streamex.version>0.6.8</streamex.version>

    <!-- Weka -->
    <weka.version>3.8.3</weka.version>
    
    <!-- Test -->
    
    <jsonassert.version>1.5.0</jsonassert.version>
    <deltaspike.version>1.7.2</deltaspike.version>
    <weld-se.version>2.3.5.Final</weld-se.version>
    <reflections.version>0.9.10</reflections.version>
    <rest-assured.version>3.0.3</rest-assured.version>
    <mariadb-module.version>2.3.0</mariadb-module.version>
    <metamind-api-client.version>2.0.14</metamind-api-client.version>
    <feign-uma.version>1.0.2</feign-uma.version>
  
    <jacoco.reportPath>${project.basedir}/target/jacoco.exec</jacoco.reportPath>
    <skipCoverage>true</skipCoverage>
  </properties>
  
  <dependencyManagement>
    <dependencies>
      <dependency>
        <groupId>org.wildfly</groupId>
        <artifactId>wildfly-spec-api</artifactId>
        <version>${wildfly.version}</version>
        <type>pom</type>
        <scope>import</scope>
        <exclusions>
          <exclusion>
            <groupId>org.apache.lucene</groupId>
            <artifactId>lucene-core</artifactId>
          </exclusion>
        </exclusions>
      </dependency>
    </dependencies>
  </dependencyManagement>

  <build>
    <sourceDirectory>src/main/java</sourceDirectory>
    <plugins>
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-surefire-plugin</artifactId>
        <version>3.0.0-M3</version>
      </plugin>	    
      <plugin>
        <groupId>org.bsc.maven</groupId>
        <artifactId>maven-processor-plugin</artifactId>
        <executions>
          <execution>
            <id>process</id>
            <goals>
              <goal>process</goal>
            </goals>
            <phase>generate-sources</phase>
            <configuration>
              <processors>
                <processor>org.hibernate.jpamodelgen.JPAMetaModelEntityProcessor</processor>
              </processors>
            </configuration>
          </execution>
        </executions>
        <dependencies>
          <dependency>        
            <groupId>org.hibernate</groupId>
            <artifactId>hibernate-jpamodelgen</artifactId>
            <version>5.4.2.Final</version>
          </dependency>
        </dependencies>
      </plugin>
      <plugin>
        <groupId>org.jacoco</groupId>
        <artifactId>jacoco-maven-plugin</artifactId>
        <version>0.7.8</version>
        <executions>
          <execution>
            <id>prepare-agent</id>
            <goals>
              <goal>prepare-agent</goal>
            </goals>
          </execution>
          <execution>
            <id>report</id>
            <goals>
              <goal>report</goal>
            </goals>
            <phase>test</phase>
          </execution>
        </executions>
      </plugin>
      <plugin>
        <groupId>org.eluder.coveralls</groupId>
        <artifactId>coveralls-maven-plugin</artifactId>
        <version>4.3.0</version>
        <executions>
          <execution>
            <id>coveralls-report</id>
            <phase>test</phase>
            <goals>
              <goal>report</goal>
            </goals>
            <configuration>
              <skip>${skipCoverage}</skip>
            </configuration>
          </execution>
        </executions>
      </plugin>
    </plugins>
  </build>

  <dependencies>
  
    <dependency>
      <groupId>org.keycloak</groupId>
      <artifactId>keycloak-core</artifactId>
      <version>${keycloak.version}</version>
      <scope>provided</scope>
    </dependency>

    <dependency>
      <groupId>org.keycloak</groupId>
      <artifactId>keycloak-adapter-spi</artifactId>
      <version>${keycloak.version}</version>
      <scope>provided</scope>
    </dependency>

    <dependency>
      <groupId>org.keycloak</groupId>
      <artifactId>keycloak-adapter-core</artifactId>
      <version>${keycloak.version}</version>
      <scope>provided</scope>
    </dependency>

    <dependency>
      <groupId>org.keycloak</groupId>
      <artifactId>keycloak-admin-client</artifactId>
      <version>${keycloak.version}</version>
      <exclusions>
        <exclusion>
	  <groupId>com.fasterxml.jackson.core</groupId>
	  <artifactId>jackson-core</artifactId>
	</exclusion>
	<exclusion>
	  <groupId>com.fasterxml.jackson.core</groupId>
	  <artifactId>jackson-databind</artifactId>
	</exclusion>
      </exclusions>
    </dependency>
  
    <dependency>
      <groupId>org.jboss.spec.javax.servlet</groupId>
      <artifactId>jboss-servlet-api_4.0_spec</artifactId>
      <scope>provided</scope>
    </dependency>

    <dependency>
      <groupId>org.wildfly</groupId>
      <artifactId>wildfly-clustering-api</artifactId>
      <scope>provided</scope>
    </dependency>

     <dependency>
      <groupId>org.slf4j</groupId>
      <artifactId>slf4j-api</artifactId>
      <version>${slf4j-api.version}</version>
    </dependency>
    
    <dependency>
      <groupId>org.apache.logging.log4j</groupId>
      <artifactId>log4j-slf4j-impl</artifactId>
      <version>${log4j.version}</version>
      <exclusions>
        <exclusion>
          <groupId>org.slf4j</groupId>
          <artifactId>slf4j-api</artifactId>
        </exclusion>
      </exclusions>
    </dependency>
    
    <dependency>
      <groupId>org.jboss.resteasy</groupId>
      <artifactId>resteasy-jaxrs</artifactId>
      <scope>provided</scope>
    </dependency>

    <dependency>
      <groupId>org.jboss.spec.javax.ws.rs</groupId>
      <artifactId>jboss-jaxrs-api_2.1_spec</artifactId>
      <scope>provided</scope>
    </dependency>

    <dependency>
      <groupId>fi.metatavu.metamind</groupId>
      <artifactId>metamind-api-spec</artifactId>
      <version>${metamind-spec.version}</version>
    </dependency>
    
    <dependency>
      <groupId>commons-logging</groupId>
      <artifactId>commons-logging</artifactId>
      <version>1.1.1</version>
    </dependency>

    <dependency>
      <groupId>org.apache.logging.log4j</groupId>
      <artifactId>log4j-slf4j-impl</artifactId>
      <version>2.7</version>
    </dependency>
    
    <dependency>
      <groupId>org.apache.logging.log4j</groupId>
      <artifactId>log4j-core</artifactId>
      <version>${log4j.version}</version>
    </dependency>
    
    <dependency>
      <groupId>javax.enterprise</groupId>
      <artifactId>cdi-api</artifactId>
      <scope>provided</scope>
    </dependency>
    
    <dependency>
      <groupId>org.jboss.spec.javax.interceptor</groupId>
      <artifactId>jboss-interceptors-api_1.2_spec</artifactId>
      <scope>provided</scope>
    </dependency>
    
    <dependency>
      <groupId>org.jboss.spec.javax.ejb</groupId>
      <artifactId>jboss-ejb-api_3.2_spec</artifactId>
      <scope>provided</scope>
    </dependency>
    
    <dependency>
     <groupId>org.wildfly</groupId>
     <artifactId>wildfly-ejb3</artifactId>
     <scope>provided</scope>
    </dependency>	
    
    <dependency>
      <groupId>org.apache.commons</groupId>
      <artifactId>commons-lang3</artifactId>
      <scope>provided</scope>
    </dependency>

    <dependency>
      <groupId>org.infinispan</groupId>
      <artifactId>infinispan-core</artifactId>
      <scope>provided</scope>
    </dependency>

    <dependency>
      <groupId>org.apache.httpcomponents</groupId>
      <artifactId>httpcore</artifactId>
      <scope>provided</scope>
    </dependency>

    <dependency>
      <groupId>org.apache.httpcomponents</groupId>
      <artifactId>httpclient</artifactId>
      <scope>provided</scope>
    </dependency>
    
    <!-- Jackson -->

    <dependency>
      <groupId>org.jboss.resteasy</groupId>
      <artifactId>resteasy-jackson2-provider</artifactId>
      <scope>provided</scope>
    </dependency>
    
    <dependency>
      <groupId>com.fasterxml.jackson.core</groupId>
      <artifactId>jackson-core</artifactId>
      <scope>provided</scope>
    </dependency>
    
    <dependency>
      <groupId>com.fasterxml.jackson.datatype</groupId>
      <artifactId>jackson-datatype-jsr310</artifactId>
      <scope>provided</scope>
    </dependency>

    <!-- Persistence -->

    <dependency>
      <groupId>org.hibernate</groupId>
      <artifactId>hibernate-core</artifactId>
      <scope>provided</scope>
    </dependency>

    <dependency>
      <groupId>org.hibernate</groupId>
      <artifactId>hibernate-entitymanager</artifactId>
      <scope>provided</scope>
    </dependency>

    <dependency>
      <groupId>org.hibernate.validator</groupId>
      <artifactId>hibernate-validator</artifactId>
      <scope>provided</scope>
    </dependency>
    
    <dependency>
      <groupId>org.liquibase</groupId>
      <artifactId>liquibase-cdi</artifactId>
      <version>${liquibase.version}</version>
    </dependency>
    
    <!-- OpenNPL -->
    
    <dependency>
	  <groupId>org.apache.opennlp</groupId>
	  <artifactId>opennlp-tools</artifactId>
	  <version>1.9.1</version>
	</dependency>
    
    <!-- Sargue mailgun -->

    <dependency>
      <groupId>net.sargue</groupId>
      <artifactId>mailgun</artifactId>
      <version>${sargue-mailgun.version}</version>
    </dependency>

    <!-- Jsoup -->
    
    <dependency>
      <groupId>org.jsoup</groupId>
      <artifactId>jsoup</artifactId>
      <scope>provided</scope>
    </dependency>
    
    <!-- Optimaize language detector -->

    <dependency>
      <groupId>com.optimaize.languagedetector</groupId>
      <artifactId>language-detector</artifactId>
      <version>${optimaize-languagedetector.version}</version>
    </dependency>

    <!-- Graal -->

    <dependency>
      <groupId>org.graalvm.sdk</groupId>
      <artifactId>graal-sdk</artifactId>
      <version>${graalvm.version}</version>
      <scope>compile</scope>
    </dependency>

    <dependency>
      <groupId>org.graalvm.js</groupId>
      <artifactId>js</artifactId>
      <version>${graalvm.version}</version>
      <scope>runtime</scope>
    </dependency>

    <dependency>
      <groupId>org.graalvm.js</groupId>
      <artifactId>js-scriptengine</artifactId>
      <version>${graalvm.version}</version>
      <scope>runtime</scope>
    </dependency>

    <dependency>
      <groupId>org.graalvm.tools</groupId>
      <artifactId>profiler</artifactId>
      <version>${graalvm.version}</version>
      <scope>runtime</scope>
    </dependency>

    <dependency>
      <groupId>org.graalvm.tools</groupId>
      <artifactId>chromeinspector</artifactId>
      <version>${graalvm.version}</version>
      <scope>runtime</scope>
    </dependency>
    
    <!-- StreamEx -->
    
    <dependency> 
	  <groupId>one.util</groupId> 
	  <artifactId>streamex</artifactId> 
	  <version>${streamex.version}</version>
    </dependency>

    <!-- Test -->
    
    <dependency>
      <artifactId>metamind-api-client</artifactId>
      <groupId>fi.metatavu.metamind.client</groupId>
      <version>${metamind-api-client.version}</version>
      <scope>test</scope>
    </dependency>
    
    <dependency>
      <groupId>org.skyscreamer</groupId>
      <artifactId>jsonassert</artifactId>
      <version>${jsonassert.version}</version>
      <scope>test</scope>
    </dependency>

    <dependency>
      <groupId>org.reflections</groupId>
      <artifactId>reflections</artifactId>
      <version>${reflections.version}</version>
      <scope>test</scope>
    </dependency>
    
    <dependency>
      <groupId>junit</groupId>
      <artifactId>junit</artifactId>
      <scope>test</scope>
    </dependency>
    
    <dependency>
      <groupId>fi.metatavu.feign</groupId>
      <artifactId>feign-uma</artifactId>
      <version>${feign-uma.version}</version>
      <scope>test</scope>
    </dependency>
    
    <dependency>
      <groupId>io.rest-assured</groupId>
      <artifactId>rest-assured</artifactId>
      <version>${rest-assured.version}</version>
      <scope>test</scope>
    </dependency>
    
    <dependency>
      <groupId>org.keycloak</groupId>
      <artifactId>keycloak-wildfly-adapter-dist</artifactId>
      <version>${keycloak.version}</version>
      <type>zip</type>
      <scope>test</scope>
    </dependency>
    
    <!-- Weka -->
    <dependency>
      <groupId>nz.ac.waikato.cms.weka</groupId>
      <artifactId>weka-stable</artifactId>
      <version>${weka.version}</version>
    </dependency>

  </dependencies>
  

  <profiles>
    <profile>
      <id>itests</id>
      <activation>
        <activeByDefault>false</activeByDefault>
      </activation>
      
      <properties>
        <it.port.http>1234</it.port.http>
        <it.host>localhost</it.host>
        <it.jdbc.driver>org.mariadb.jdbc.MySQLDataSource</it.jdbc.driver>
        <it.jdbc.module>com.mariadb.jdbc</it.jdbc.module>
        <it.jdbc.dbname>mmtest</it.jdbc.dbname>
        <it.jdbc.url>jdbc:mysql://localhost:3306/${it.jdbc.dbname}</it.jdbc.url>
        <it.jdbc.jndi>java:jboss/datasources/metamind-api</it.jdbc.jndi>
        <it.jdbc.username>sa</it.jdbc.username>
        <it.jdbc.password>sa</it.jdbc.password>
        <it.skipdatabasedrop>true</it.skipdatabasedrop>
        <jacoco.reportPath>${project.basedir}/target/jacoco.exec</jacoco.reportPath>
      </properties>
      
      <build>
        <plugins>
          <plugin>
          	<groupId>io.fabric8</groupId>
            <artifactId>docker-maven-plugin</artifactId>
            <configuration>
              <images>
            	   <image>
                  <name>mysql:5.6</name>
                  <alias>test-mysql</alias>
                  <run>
                    <ports>
                      <port>3306:3306 </port>
                    </ports>
                    <env>
                      <MYSQL_ROOT_PASSWORD>rootpass</MYSQL_ROOT_PASSWORD>
                      <MYSQL_DATABASE>db</MYSQL_DATABASE>
                      <MYSQL_USER>user</MYSQL_USER>
                      <MYSQL_PASSWORD>pass</MYSQL_PASSWORD>
                    </env>
                    <wait>
                      <log>ready for connections.</log>
                    </wait>
                    <cmd>--lower_case_table_names=1</cmd>
                  </run>
                </image>
                <image>
                  <name>jboss/keycloak:${keycloak.version}</name>
                  <alias>test-keycloak</alias>
                  <run>
                    <env>
                      <KEYCLOAK_USER>admin</KEYCLOAK_USER>
                      <KEYCLOAK_PASSWORD>admin</KEYCLOAK_PASSWORD>
                      <KEYCLOAK_IMPORT>/opt/docker/kc.json</KEYCLOAK_IMPORT>
                    </env>
                    <volumes>
                      <bind>
                        <volume>${project.basedir}/test-volumes/keycloak:/opt/docker</volume>
                      </bind>
                    </volumes>
                    <ports>
                      <port>8080:8080</port>
                    </ports>
                    <wait>
                      <log>Resuming server</log>
                      <time>120000</time>
                    </wait>
                  </run>
                </image>
                <image>
                  <name>test-api</name>
                  <build>
                    <dockerFileDir>${project.basedir}</dockerFileDir>
                    <filter>@</filter>
                  </build>
                  <run>
                    <ports>
                      <port>1234:8080</port>
                    </ports>
                    <links>
                      <link>test-mysql:test-mysql</link>
                      <link>test-keycloak:test-keycloak</link>
                    </links>
                    <env>
                      <METAMIND_API_HOST>localhost</METAMIND_API_HOST>
                      <METAMIND_API_DB_HOST>test-mysql</METAMIND_API_DB_HOST>
                      <METAMIND_API_DB_PORT>3306</METAMIND_API_DB_PORT>
                      <METAMIND_API_DB_NAME>db</METAMIND_API_DB_NAME>
                      <METAMIND_API_DB_OPTS/>
                      <METAMIND_API_DB_USERNAME>root</METAMIND_API_DB_USERNAME>
                      <METAMIND_API_DB_PASSWORD>rootpass</METAMIND_API_DB_PASSWORD>
                      <KEYCLOAK_REALM>metamind</KEYCLOAK_REALM>
                      <KEYCLOAK_RESOURCE>api</KEYCLOAK_RESOURCE>
                      <KEYCLOAK_URL>http://test-keycloak:8080/auth</KEYCLOAK_URL>
                      <KEYCLOAK_SECRET>1be749de-2023-4ebf-aba0-90679ffab56b</KEYCLOAK_SECRET>
                      <KEYCLOAK_ADMIN_USER>admin</KEYCLOAK_ADMIN_USER>
                      <KEYCLOAK_ADMIN_PASS>admin</KEYCLOAK_ADMIN_PASS>
                      <KEYCLOAK_ADMIN_CLIENT_ID>admin-cli</KEYCLOAK_ADMIN_CLIENT_ID>
                      <KEYCLOAK_ADMIN_CLIENT_SECRET/>
                      <KEYCLOAK_CONFIG_PATH>/opt/docker/scripts/keycloak.json</KEYCLOAK_CONFIG_PATH>
                      <KUBERNETES_NAMESPACE>test</KUBERNETES_NAMESPACE>
                      <KUBERNETES_LABELS>test</KUBERNETES_LABELS>
                      <IT_HOST>localhost</IT_HOST>
                      <IT_PORT_HTTP>1234</IT_PORT_HTTP>
                      <runmode>TEST</runmode>
                    </env>
                    <volumes>
                      <bind>
                        <volume>${project.basedir}/scripts:/opt/docker/scripts</volume>
                      </bind>
                    </volumes>
                  </run>
                </image>
            	</images>
            	<showLogs>true</showLogs>
            </configuration>
            <executions>
              <execution>
                <id>docker-test-api-build</id>
                <phase>pre-integration-test</phase>
                <goals>
                  <goal>build</goal>
                </goals>
              </execution>
              <execution>
                <id>docker-test-api-start</id>
                <phase>pre-integration-test</phase>
                <goals>
                  <goal>start</goal>
                </goals>
              </execution>
              <execution>
                <id>docker-test-api-stop</id>
                <phase>post-integration-test</phase>
                <goals>
                  <goal>stop</goal>
                </goals>
              </execution>
            </executions>
          </plugin>
          <plugin>
            <groupId>org.apache.maven.plugins</groupId>
            <artifactId>maven-failsafe-plugin</artifactId>
            <version>3.0.0-M3</version>
            <configuration>
              <failIfNoTests>true</failIfNoTests>
              <skipAfterFailureCount>1</skipAfterFailureCount>
              <argLine>-Xmx2G</argLine>
              <includes>
                <include>${it.tests}</include>
              </includes>
              <systemPropertyVariables>
                <java.util.logging.config.file>${project.basedir}/src/test/resources/logging.properties</java.util.logging.config.file>
                <jboss.home>${wildfly.home}</jboss.home>
                <module.path>${wildfly.home}/modules</module.path>
                <it.host>${it.host}</it.host>
                <it.port.http>${it.port.http}</it.port.http>
                <it.jdbc.driver>${it.jdbc.driver}</it.jdbc.driver>
                <it.jdbc.url>${it.jdbc.url}</it.jdbc.url>
                <it.jdbc.jndi>${it.jdbc.jndi}</it.jdbc.jndi>
                <it.jdbc.username>${it.jdbc.username}</it.jdbc.username>
                <it.jdbc.password>${it.jdbc.password}</it.jdbc.password>
              </systemPropertyVariables>
            </configuration>
            <executions>
              <execution>
                <id>integration-test</id>
                <goals>
                  <goal>integration-test</goal>
                </goals>
              </execution>
              <execution>
                <id>verify</id>
                <goals>
                  <goal>verify</goal>
                </goals>
              </execution>
            </executions>
          </plugin>
          
            
          <plugin>
            <groupId>org.sonatype.plugins</groupId>
            <artifactId>wait-maven-plugin</artifactId>
            <version>1.0</version>
            <executions>
              <execution>
                <id>wait</id>
                <phase>pre-integration-test</phase>
                <goals>
                  <goal>wait</goal>
                </goals>      
                <configuration>
                  <protocol>http</protocol>
                  <host>${it.host}</host>
                  <port>${it.port.http}</port>
                  <file>/v2/system/ping</file>
                  <maxcount>20</maxcount>
                  <timeout>10000</timeout>
                </configuration>
              </execution>
            </executions>
          </plugin>
          
          <plugin>
            <groupId>org.eluder.coveralls</groupId>
            <artifactId>coveralls-maven-plugin</artifactId>
            <version>4.3.0</version>
          </plugin>
        </plugins>
      </build>
    </profile>  
  </profiles>  
  
  <repositories>  
    <repository>
      <id>sonatype-nexus-snapshots</id>
      <snapshots/>
      <name>Sonatype Nexus Snapshots</name>
      <url>https://oss.sonatype.org/content/repositories/snapshots</url>
    </repository>
  </repositories>
  
</project>
