buildscript {
    ext.jaxrs_functional_test_builder_version = "1.0.4"
}

plugins {
    id 'org.jetbrains.kotlin.jvm' version "1.4.20"
    id "org.jetbrains.kotlin.plugin.allopen" version "1.4.20"
    id "org.jetbrains.kotlin.kapt" version "1.4.30"
    id "org.openapi.generator" version "5.0.1"
    id 'io.quarkus'
}

repositories {
    mavenLocal()
    mavenCentral()
}

dependencies {
    implementation enforcedPlatform("${quarkusPlatformGroupId}:${quarkusPlatformArtifactId}:${quarkusPlatformVersion}")
    implementation 'io.quarkus:quarkus-hibernate-orm'
    implementation 'io.quarkus:quarkus-kotlin'
    implementation 'io.quarkus:quarkus-resteasy'
    implementation 'io.quarkus:quarkus-jdbc-mysql'
    implementation 'io.quarkus:quarkus-keycloak-admin-client'
    implementation 'org.jetbrains.kotlin:kotlin-stdlib-jdk8'
    implementation 'io.quarkus:quarkus-resteasy'
    implementation 'io.quarkus:quarkus-arc'

    implementation 'com.sun.xml.ws:jaxws-rt:3.0.0'
    implementation 'commons-logging:commons-logging:1.1.1'
    implementation 'javax.enterprise:cdi-api:2.0.SP1'
    implementation 'org.apache.commons:commons-lang3'
    implementation "org.liquibase:liquibase-cdi:4.3.1"
    implementation 'org.apache.opennlp:opennlp-tools:1.9.1'
    implementation "net.sargue:mailgun:1.9.2"
    implementation 'org.jsoup:jsoup:1.13.1'
    implementation "com.optimaize.languagedetector:language-detector:0.6"
    implementation "one.util:streamex:0.7.3"
    implementation "org.glassfish.jersey.bundles.repackaged:jersey-guava:2.6"
    implementation 'org.picketbox:picketbox:4.9.2.Final'

    testImplementation "com.squareup.moshi:moshi-kotlin:1.9.2"
    testImplementation "com.squareup.moshi:moshi-adapters:1.9.2"
    testImplementation 'com.squareup.okhttp3:okhttp'
    testImplementation 'io.quarkus:quarkus-junit5'
    testImplementation 'org.testcontainers:mysql:1.15.1'
    testImplementation 'org.testcontainers:junit-jupiter:1.15.1'
    testImplementation "fi.metatavu.jaxrs.testbuilder:jaxrs-functional-test-builder:$jaxrs_functional_test_builder_version"

}

group 'fi.metatavu.metamind'
version '2.0.1-SNAPSHOT'

java {
    sourceCompatibility = JavaVersion.VERSION_11
    targetCompatibility = JavaVersion.VERSION_11
}

sourceSets.main.java.srcDirs += ['build/generated/api-spec/src/gen/java']
sourceSets.test.java.srcDirs += ['build/generated/api-client/src/main/kotlin']

allOpen {
    annotation("javax.ws.rs.Path")
    annotation("javax.enterprise.context.ApplicationScoped")
    annotation("io.quarkus.test.junit.QuarkusTest")
}

task generateApiSpec(type: org.openapitools.generator.gradle.plugin.tasks.GenerateTask) {
    generatorName = "jaxrs-spec"
    inputSpec = "$rootDir/metamind-spec/swagger.yaml".toString()
    outputDir = "$buildDir/generated/api-spec".toString()

    configOptions = [
            dateLibrary: "java8",
            interfaceOnly: "true",
            returnResponse: "true",
            useSwaggerAnnotations: "false"
    ]

    apiPackage = "fi.metatavu.metamind.api.spec"
    invokerPackage = "fi.metatavu.metamind.api.spec.invoker"
    modelPackage = "fi.metatavu.metamind.api.spec.model"
}

task generateApiClient(type: org.openapitools.generator.gradle.plugin.tasks.GenerateTask) {
    generatorName = "kotlin"
    library = "jvm-okhttp3"
    inputSpec = "$rootDir/metamind-spec/swagger.yaml".toString()
    outputDir = "$buildDir/generated/api-client".toString()

    packageName = "fi.metatavu.metamind.api.client"
    configOptions = [
            dateLibrary: "string"
    ]
}

compileKotlin {
    dependsOn generateApiSpec
    kotlinOptions.jvmTarget = JavaVersion.VERSION_11
    kotlinOptions.javaParameters = true
}

compileTestKotlin {
    dependsOn generateApiClient
    kotlinOptions.jvmTarget = JavaVersion.VERSION_11
}

kapt {
    correctErrorTypes = true
}